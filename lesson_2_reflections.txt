What happens when you initialize a repository? 
Why do you need to do it?

a .git file is created in the folder of the repo, 
which maintains details of the repository's 
history. Thus, a normal directory gets converted 
to a git repository that can be committed as 
required.
Inititalization is required in order to change 
our folders from regular directories to git repo's 
that can be committed and tracked.

How is the staging area different from the working 
directory and the repository? What value do you 
think it offers?

Repository is the collection of files being 
definitively tracked, whereas working directory is
the directory we are currently positioned in through 
Git Bash. The staging area is the intermediate area 
where any files that need to be committed are added 
before the final commit takes place. In this way, it 
offers a place to check the files we want to commit 
before they are added to the repo for tracking.

How can you use the staging area to make sure you 
have one commit per logical change?

We can use the diff command without arguments to 
check differences between the working directory 
version and staging area versions. This will show how 
much extra code has been written in and a judgement 
call can be made on whether it is time to stage. 
Similarly diff --staged will show the difference 
between the staging area and the repo commits, so a 
call can be made on whether the staging area edits 
should be committed.

What are some situations when branches would be helpful 
in keeping your history organized? How would branches 
help?

When introducing any features that are not a logical 
extension of the code developed int he current thread, 
it is better to make a new branch so these new features 
can safely be developed in that branch without becoming 
the latest version of the current master code. At a 
later time, when the features in the auxiiary branch 
are complete, they can be added to the master branch. 
This feature comes in handy when developing new versions 
of a producs, or for experimentation and exploration in 
new directions, based on the master code, etc.
Thus each new logical area of exploration/development 
can be conducted in its separate branch, keeping the 
code organized and manageable.

How do the diagrams help you visualize the branch 
structure?

They help to depict the various commits in each branch 
in a pictorial manner, where each commit becomes a node 
in its branch, with an arrow pointing from the commit to 
its parent commit. Thus, it helps to see the entire Git 
history in a graphical format in an organized way, rather 
than as a log of commits.

What is the result of merging two branches together? 
Why do we represent it in the diagram the way we do?

The result of merging to branches together is that all the 
commits made to both branches become part of the branch 
that was checked out at the time of the merge. The commits
get arranged in reverse chronological order according to 
their timestamps.
They are represented in the diagram in this way so that we 
can see the exact commit where the branches diverged, then 
all the changes that were made to each branch while they 
were separate are shown in parallel, and finally, the 
diagram shows the commit where we merge the two branches as 
the node where the two branches becomes one and any further 
commits are added to this single branch.

What are the pros and cons of Gitâ€™s automatic merging vs. 
always doing merges manually?

Automatic merge saves time and effort over manual merging, 
reduces the instance of typos and other human error. 
A con of automatic merge vs. manual merge is that in case of 
conflicts, very simple conflicts might have to be cleaned up
just because two changes happen to be in the same general 
area. Additionally, it might skip over some important changes
that are required in the final output, or might put in 
redundant code when it is not needed.